name: PR Quality Check

on:
  pull_request:
    branches: [ main ]

jobs:
  evaluate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache HuggingFace models
        uses: actions/cache@v3
        with:
          path: ~/.cache/huggingface
          key: ${{ runner.os }}-hf-models-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-hf-models-

      - name: Cache FAISS index
        uses: actions/cache@v3
        with:
          path: faiss_index
          key: ${{ runner.os }}-faiss-${{ hashFiles('data/source_document.pdf') }}
          restore-keys: |
            ${{ runner.os }}-faiss-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run document ingestion
        run: |
          echo "üìÑ Running document ingestion to create FAISS index..."
          export PYTHONPATH=$GITHUB_WORKSPACE
          python scripts/ingest.py

      - name: Check for golden dataset
        run: |
          if [ ! -f "data/golden_dataset.json" ]; then
            echo "‚ùå Golden dataset not found at data/golden_dataset.json"
            exit 1
          fi

      - name: Run evaluation
        run: |
          export PYTHONPATH=$GITHUB_WORKSPACE
          python scripts/run_evaluation.py --output current_report.json --judge-model gpt-3.5-turbo
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGCHAIN_TRACING_V2: false  # Disable tracing in CI

      - name: Check for regressions
        run: python scripts/compare_metrics.py baseline_report.json current_report.json

      - name: Upload evaluation report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: evaluation-report
          path: current_report.json

      - name: Comment on PR
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            if (!fs.existsSync('current_report.json')) {
              const comment = `## ‚ùå Evaluation Failed

              The evaluation report was not generated. Check the workflow logs for details.

              Common issues:
              - Missing or invalid OPENAI_API_KEY secret
              - Network connectivity issues
              - Evaluation script errors
              `;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              return;
            }

            const report = JSON.parse(fs.readFileSync('current_report.json', 'utf8'));

            // Handle NaN values gracefully
            const formatScore = (score) => {
              if (score === null || isNaN(score)) return 'N/A';
              return score.toFixed(3);
            };

            const checkStatus = (score, threshold) => {
              if (score === null || isNaN(score)) return '‚ö†Ô∏è';
              return score >= threshold ? '‚úÖ' : '‚ùå';
            };

            const comment = `## üìä Evaluation Results

            | Metric | Score | Status |
            |--------|-------|--------|
            | Faithfulness | ${formatScore(report.scores.faithfulness)} | ${checkStatus(report.scores.faithfulness, 0.80)} |
            | Answer Relevancy | ${formatScore(report.scores.answer_relevancy)} | ${checkStatus(report.scores.answer_relevancy, 0.80)} |
            | Context Recall | ${formatScore(report.scores.context_recall)} | ${checkStatus(report.scores.context_recall, 0.75)} |
            | Context Precision | ${formatScore(report.scores.context_precision)} | ${checkStatus(report.scores.context_precision, 0.70)} |

            **Pass Rate**: ${isNaN(report.pass_rate) ? 'N/A' : report.pass_rate.toFixed(0) + '%'}
            ${isNaN(report.pass_rate) ? '\n‚ö†Ô∏è **Warning**: Evaluation failed due to API connectivity issues. Please check OPENAI_API_KEY secret and try again.' : ''}
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
